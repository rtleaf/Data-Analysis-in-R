[["index.html", "1 Syllabus 1.1 Special Topics: Data analysis using R 1.2 Course Description and Objectives 1.3 At the conclusion of this course: 1.4 Course Materials 1.5 Course Scheduling 1.6 Course Workload Statement 1.7 Course Evaluation 1.8 Assignment Policy and Procedures 1.9 Grading scale 1.10 Academic Support Resources 1.11 Academic Success 1.12 Mental Well-Being Statement 1.13 Covid-19 (Physical Well-Being) 1.14 Nondiscrimination Statement 1.15 Confidentiality and Mandatory Reporting 1.16 Academic Integrity 1.17 Content of this online material.", " 1 Syllabus 1.1 Special Topics: Data analysis using R Date: 03 February 2022 Instructor: Dr. Robert Leaf Office: GCRL Oceanography 119 Office Hours: Make a time to see me in-person or online. Email: robert.leaf@usm.edu Phone: 2-4296 Course Meeting Day and Time: MW, 2:30 to 3:45 PM Course Meeting Location: Caylor Computer Lab and Zoom 1.2 Course Description and Objectives This course examines the fundamental concepts and techniques for programming in the R statistical programming language. I am convinced that data analysis, data manipulation, data visualization, and reproducible research necessitates command of quantitative tools. Although there are many specialized and general programming languages, the R programming language offers exceptional utility for analysis and is used widely in academia, industry, and by federal and state scientific groups. The demand for skilled data analysis practitioners is rapidly growing and this course prepares you to tackle real-world data analysis challenges. The primary components of the course: Introduce the basics of R programming The course will introduce stereotypical programming concepts, in particular code modularisation, writing and using functions, and code re-usability. We will focus on understanding software engineering concepts such as project build and code testing. Participants will establish a working knowledge of R, R Studio, and relevant packages Review aspects of project organization A typical data analysis project involves several many components, each including several data files and different binary scripts with code. Keeping these files organized can be challenging and requires a suite of analytical tools. Perform operations on vectors and understand how to use advanced functions Learn how to wrangle, analyze and visualize data using base R operations and specialized packages (e.g. tidyverse and ggplot2) Promote a reproducible research workflow Finally, we will examine how to write markdown documents for high throughput data presentation which permits you to incorporate text and code into a document. 1.3 At the conclusion of this course: Students will be able to recognize problems that can be solved using statistical programming and reproducible research approaches. The skills of sharing, automation, and organization enable making research more reproducible. By practicing and reinforcing the use of quantitative tools, participants will be better able to make insights that would otherwise be hidden. 1.4 Course Materials R for Data Science by G. Grolemund and H. Wickham (https://r4ds.had.co.nz/). This is R4DS in the syllabus. bookdown: Authoring Books and Technical Documents with R Markdown by Y. Xie (https://bookdown.org/yihui/bookdown/). This is BD in the syllabus. Mastering Shiny by H. Wickham (https://mastering-shiny.org/). This is MS in the syllabus. Tufte, E. R. (2001). The Visual Display of Quantitative Information. Cheshire, Connecticut: Graphics Press. This is Tufte in the syllabus. 1.5 Course Scheduling Class Number Day Assignments Reading 1 Wednesday, January 19, 2022 Syllabus, RStudio and R, R Packages, Useful Shortcuts 2 Monday, January 24, 2022 Projects, Directory Structure, File Types R4DS 08 3 Wednesday, January 26, 2022 Data input and output 4 Monday, January 31, 2022 Data Classes 5 Wednesday, February 2, 2022 R syntax 6 Monday, February 7, 2022 R syntax 7 Wednesday, February 9, 2022 Indexing and Logical Operators 8 Monday, February 14, 2022 Loops 9 Wednesday, February 16, 2022 Data Organization and Workflow, Assignment 01 Due R4DS 01, 02, Broman and Wu 10 Monday, February 21, 2022 Data Transformation R4DS 05 11 Wednesday, February 23, 2022 Data Wrangling and Tibbles R4DS 09, R4DS 10 Monday, February 28, 2022 Mardi Gras Holiday 12 Wednesday, March 2, 2022 Tidy Data R4DS 12 13 Monday, March 7, 2022 Relational Data R4DS 13 14 Wednesday, March 9, 2022 Strings R4DS 14 15 Monday, March 14, 2022 Factors, Assignment 02 Due R4DS 15 16 Wednesday, March 16, 2022 Dates and Times R4DS 16 17 Monday, March 21, 2022 Pipes R4DS 17, R4DS 18 18 Wednesday, March 23, 2022 Functions R4DS 19 19 Monday, March 28, 2022 Graphical Display Tufte 20 Wednesday, March 30, 2022 ggplot2 I R4DS 03 21 Monday, April 4, 2022 ggplot2 II R4DS 03 22 Wednesday, April 6, 2022 ggplot2 III R4DS 28 23 Monday, April 11, 2022 Rmarkdown I, Assignment 03 Due R4DS 29 24 Wednesday, April 13, 2022 Rmarkdown II R4DS 30 25 Monday, April 18, 2022 Bookdown BD 01 to BD 02 26 Wednesday, April 20, 2022 Preliminary Project Presentations I 27 Monday, April 25, 2022 Preliminary Project Presentations II 28 Wednesday, April 27, 2022 R Shiny I MS 01 to MS 02 29 Monday, May 2, 2022 R Shiny II MS 03 to MS 04 30 Wednesday, May 4, 2022 R Shiny III MS 05 to MS 06 31 Monday, May 9, 2022 Final Project Presentation - Date and Time TBD, Assignment 04 Due 1.6 Course Workload Statement Students are expected to invest considerable time outside of class in learning the material for this course. The expectation of the University of Southern Mississippi is that students should spend approximately 2 to 3 hours outside of class each week for every hour in class working on reading, assignments, studying, and other work for the course. Time management is thus critical for student success. All students should assess their personal circumstances and talk with their advisors about the appropriate number of credit hours to take each term. Resources for academic support can be found at https://www.usm.edu/success. 1.7 Course Evaluation Percentage Letter Grade 93-100 A 90-92 A- 86-89 B+ 83-85 B 80-82 B- 76-79 C+ 73-75 C 70-72 C- 66-69 D+ 63-65 D 60-62 D- &lt; 60 F 1.8 Assignment Policy and Procedures All assigned work (Assignments and Project) will be due at the beginning of class on its assigned due date. You will be submitting your code to me, via email at .r files and I will check that the code runs properly, grade the assignment, and provide feedback within five business days. Late work will not be given full credit. To receive full credit, all code must run on all my machine and return all required components of the assignment. You may turn in any assignment as many times as necessary to ensure that you receive credit. 1.9 Grading scale Evaluation type Number Points per item Total points Assignments 4 10 40 Preliminary Project Presentations 1 20 20 Final Project 1 10 10 1.10 Academic Support Resources If a student believes that they have a disability which is covered by the Americans with Disabilities Act (ADA) and makes them eligible to receive classroom accommodations, they should contact the Office for Disability Accommodations (ODA) for information regarding the registration process.  Disabilities covered by the ADA may include but are not limited to ADHD, learning disabilities, psychiatric disabilities, physical disabilities, chronic health disorders, temporary illnesses or injuries and pregnancies. Students should contact ODA if they are not certain whether their documented medical condition qualifies for ODA services.  Students are only required to disclose their disability to the Office for Disability Accommodations.  All information submitted to ODA by the student is held with strict confidentiality. 1.11 Academic Success The Academic Success Center at Gulf Park The Academic Success Center is located on the first floor of the Gulf Coast Library on the Gulf Park campus in Long Beach. Through peer tutors and professional support staff, the Academic Success Center offers a broad range of services including: Academic Coaching, Learning materials and electronic resources, Individual and small group tutoring, Whole class support, Workshops and seminars, Technology and multi-media support, Media labs for individual and group projects, Online and in person tutoring sessions in a variety of subjects. For more information, visit us as www.usm.edu/asc. To make an appointment, please visit www.usm.mywconline.com. If you have questions about our services, call us at 4-3346 or email us at academic.success@usm.edu. 1.12 Mental Well-Being Statement I recognize that students sometimes experience challenges that make learning difficult. If you find that life stressors such as anxiety, depression, relationship problems, difficulty concentrating, alcohol or drug problems, or other stressful experiences are interfering with your academic or personal success, consider contacting Student Counseling Services on campus at 601-266-4829. More information is also available at https://www.usm.edu/student-counseling- services. All students are eligible for free, confidential individual or group counseling services. In the event of emergency, please call 911 or contact the counselor on call at 601-606-HELP (4357). 1.13 Covid-19 (Physical Well-Being) This semester, please follow our updated COVID-19 guidelines to ensure we remain as safe and healthy as we can during the continued pandemic. Our goals are to continue our in-person classes, hold events and activities on campus, and provide support to those in the community to weather the challenges we are facing. Face-to-Face Protocol - We want everyone to follow the Universitys complete Community Standards, which are updated as needed based on changing patterns with the virus. Face coverings are required for all indoor activities, regardless of your vaccination status, and we ask that you monitor yourself for fever and other symptoms each day. Temperature-taking kiosks can be found in the Union, Cochran Center, and other high-traffic areas of our campuses for your convenience. Vaccinations - If you have not yet been fully vaccinated, appointments can be made via Moffitt Health Centers online health portal. If you prefer to schedule an appointment off-campus, please see the Mississippi Department of Healths website. Please note that if it has been more than six months since your last shot, you must have a booster in order to be up-to-date with vaccination. If You Are Exposed to COVID-19/Have Symptoms/Test Positive - It is important that everyone in the community closely monitor their own health and stay home when that will help them heal or may protect others. For Vaccinated students: If you are exposed to COVID-19 and have no symptoms, wear a mask at all times and test five days after exposure. If your test is negative, continue as normal. If you have a positive COVID test, stay home for five additional days then return as long as you do not have symptoms (e.g., fever). If you have symptoms, stay home until your symptoms pass. For Unvaccinated students: If you are exposed to COVID-19, stay home and test 5 days after exposure. If you have a positive COVID test, stay home for ten days (or as advised by your physician, based on symptoms), then return as long as you do not have symptoms (e.g., fever). If you need to stay home due to COVID-19: Contact the Dean of Students office to let them know (dos@usm.edu), and contact all your professors to let them know you will be out. In all cases: Call Moffit Health Center at 601-266-5390 for further guidance. 1.14 Nondiscrimination Statement The University of Southern Mississippi offers to all persons equal access to educational, programmatic and employment opportunities without regard to age, sex, sexual orientation, disability, pregnancy, gender identity, genetic information, religion, race, color, national origin, and/or veteran status pursuant to applicable state and federal law. 1.15 Confidentiality and Mandatory Reporting As an instructor, one of my responsibilities is to help create and maintain a safe learning environment.  I have a mandatory reporting responsibility related to my role as a faculty member.  I am required to share information regarding sexual misconduct or information about a crime that may have occurred on USMs campus with certain University officials responsible for the investigation and remediation of sexual misconduct. The information will remain private and will only be shared with those officials necessary to resolve the matter.  If you would like to speak in confidence, resources available to students include Confidential Advisors with the Shafer Center for Crisis Intervention, the Counseling Center, and Student Health Services.  More information on these resources and University Policies is available at https://www.usm.edu/sexual-misconduct. 1.16 Academic Integrity All students at the University of Southern Mississippi are expected to demonstrate the highest levels of academic integrity. Forms of academic dishonesty include cheating (including copying from others work), plagiarism (representing another persons words or ideas as your own; failure to properly cite the source of your information, argument, or concepts), falsification of documents, disclosure of or use of test material or other assignment content to another student, submission of the same paper or other assignment to more than one class without the explicit approval of all faculty members involved, unauthorized academic collaboration with others, conspiracy to engage in academic misconduct. Engaging in any of these behaviors or supporting others who do so will result in academic penalties and/or other sanctions. If a faculty member determines that a student has violated our Academic Integrity Policy, sanctions ranging from resubmission of work to course failure may occur, including the possibility of receiving a grade of XF for the course, which will be on the students transcript with the notation Failure due to academic misconduct. 1.17 Content of this online material. The material presented on this site is derived from a few different online and published sources. These sources are not explicitly cited and the intention is for the presented material to be referenced with the following books (on reserve in the library). Crawley, M. J. (2013). The R book. New York: Wiley. ISBN: 9781118448908 1118448901 9781118448946 1118448944 9781118448960 1118448960 Teetor, P. (2011). R cookbook. Beijing: OReilly. ISBN: 9780596809157 0596809158 Tufte, E. R. (2001). The Visual Display of Quantitative Information. Cheshire, Connecticut: Graphics Press. ISBN: 0-9613921-4-2 Wickham, Hadley (2014). Advanced R. Routledge. ISBN-10 : 9781466586963 Wickham, Hadley and Grolemund, Garret (2017). R for Data Science. OReilly Media. ISBN-13: 978-1491910399 Wickham, Hadley (2016).ggplot2: Elegant Graphics for Data Analysis (Use R). Springer. ISBN-13: 978-3319242750 "],["rstudio-and-r.html", "2 RStudio and R 2.1 R installation 2.2 RStudio installation 2.3 RStudio and R 2.4 Working in RStudio 2.5 Change my .Rprofile site 2.6 Useful RStudio shortcuts", " 2 RStudio and R 2.1 R installation Open an internet browser and go to www.r-project.org. Click the download R link in the middle of the page under Getting Started. Select a CRAN location (a mirror site) and click the corresponding link. Click on the Download R for (Mac) OS X link at the top of the page. Click on the file containing the latest version of R under Files. Save the .pkg file, double-click it to open, and follow the installation instructions. Now that R is installed, you need to download and install RStudio. 2.2 RStudio installation Go to www.rstudio.com and click on the Download RStudio button. Click on Download RStudio Desktop. Click on the version recommended for your system, or the latest Mac version, save the .dmg file on your computer, double-click it to open, and then drag and drop it to your applications folder. 2.3 RStudio and R Is a developer environment for coding, data management, and version control. Multi-pane structure Script editor Console Environment and history Files, plots, packages and help 2.4 Working in RStudio 2.4.1 Script Editor Allows the user to create multi-line code. It is here that you will develop your code and send it to the console. You will save your scripts as appropriately titled .r files. To create a new R script you can either go to File -&gt; New -&gt; R Script, or click on the icon with the + sign and select R Script, or simply press Ctrl+Shift+N. Make sure to save the script. 2.4.2 Console The console is where you can type commands and see output. &gt; is the R Prompt Symbol: You should see the R prompt symbol in your console. If you dont see the prompt, you cannot execute code. + is the R Prompt Symbol meaning you have unfinished code from the previous line. This often occurs if you have an open (unmatched) parentheses or a multiline input. Pressing the ESC will return the &gt; symbol to your console. 2.4.3 Files tab The files tab shows the directory structure and allows GUI manipulation of directories. 2.4.4 Plots tab The plots tab will show all your figures and it is possible to scroll through multiple plots windows. 2.4.5 Packages tab Provides a list of installed packages and a mechanism to load new ones. Here, you can install packages here or using the command line (in the console). # In the console type: install.packages(&quot;package name in quotes&quot;) # Example: install.packages(&quot;dplyr&quot;) For some packages you will see that dependencies are installed when the desired package is installed. These are the packages that the installed package needs in order to run some or all of the functions. 2.4.6 Help tab This tab will be automatically selected whenever you run help code in the Console. 2.4.7 History tab The history tab keeps a record of all previous commands. This can be useful when testing and running processes. To use archived code here, select all and click on the To Source icon, a window on the left will open with the list of commands. 2.4.8 Environment tab Displays data, their classes, and dimensions in your workspace. 2.5 Change my .Rprofile site .Rprofile files are user-controllable files to set options and environment variables. .Rprofile files can be either at the user or project level. User-level .Rprofile files live in the base of the users home directory, and project-level .Rprofile files live in the base of the project directory. R will source only one .Rprofile file. So if you have both a project-specific .Rprofile file and a user .Rprofile file that you want to use, you explicitly source the user-level .Rprofile at the top of your project-level .Rprofile with source(~/.Rprofile). One easy way to edit your .Rprofile file is to use the usethis::edit_r_profile() function from within an R session. You can specify whether you want to edit the user or project level .Rprofile. usethis::edit_r_profile 2.6 Useful RStudio shortcuts Execute code [Ctrl+Alt+R] or [Ctrl+Enter] Ctrl+Enter is used when executing the code line by line. Also, a highlighted chunk of code can also be executed by this command. Commenting and uncommenting code [Ctrl + Shift + C] Adding a Pipe operator [Ctrl + Shift + M] Insert The Assignment Operator [Alt +] Cursor-Select Multiple Lines [Ctrl + Alt + Up/Down/Click] Find in Files [Ctrl + Shift + F] Keyboard Shortcut Cheat Sheet [Alt + Shift + K] Hide code [Alt + L] Hiding the code is handy when your code involves large functions or chunks of code that can be hidden to ease the writing of the code. By using the Alt+L shortcut, one can hide the highlighted code which can be expanded back by clicking on the yellow icon with a two-way arrow. Once you close and open the code window again, the hidden code will be in the expanded form. "],["projects-and-directory-structure.html", "3 Projects and Directory Structure 3.1 Projects 3.2 Stereotypical Directory Structure 3.3 Filetypes in R", " 3 Projects and Directory Structure 3.1 Projects https://support.rstudio.com/hc/en-us/articles/200526207-Using-RStudio-Projects 3.2 Stereotypical Directory Structure https://swcarpentry.github.io/r-novice-gapminder/02-project-intro/ 3.3 Filetypes in R https://sphweb.bumc.bu.edu/otlt/MPH-Modules/BS/R/R1_GettingStarted/R1_GettingStarted8.html "],["data-input-and-output-io.html", "4 Data input and output (IO) 4.1 Some considerations: 4.2 Reading and Writing Files 4.3 Small data 4.4 Large(r) data", " 4 Data input and output (IO) 4.1 Some considerations: Keep the names of local files downloaded from the internet or copied onto your computer unchanged. This will help you trace the provenance of the data in the future. Rs native file format .RData can be accessed using load and save. 4.2 Reading and Writing Files There are many methods to read and write files in R programming. Your command of these is critical because all scientific work begins with data, and most data is found inside files and databases. Dealing with input is probably the first step of implementing any significant project. 4.3 Small data For very small datasets, enter the data by hand. c is a common function used for concatenation (think combine): x &lt;- c(3,7,11,19) y &lt;- c(1,1,1,1) c(x,y) y &lt;- c(x,y,5) There are a suite of functions to enter data in the console. The sequence function seq: y &lt;- seq(from = 1, to = 10) y &lt;- seq(from = 1, to = 10, by = 2.5) y &lt;- seq(from = 1, to = 10, length.out = 22) Use the function rep (repeat): y &lt;- rep(x = 5, times = 4) x.value &lt;- c(2,3) rep(x.value, times = 3) Alternatively, you can create an empty data frame and then invoke the built-in, spreadsheet-like editor to populate it using data.frame. # Create a data frame using the &quot;data.frame&quot; function site.name &lt;- c(rep(&quot;Site.01&quot;,3),rep(&quot;Site.02&quot;,3)) density &lt;- rep(x = 2.3, times = length(site.name)) abundance &lt;- seq(from = 14.5, to = 19.8, length.out = length(site.name)) sampled. &lt;- c(F, T, F, F, T, F) y.data.frame &lt;- data.frame(site.name, density, abundance, sampled.) y.data.frame class(y.data.frame) 4.4 Large(r) data 4.4.1 read.csv Most scientific work will involve data larger than can be entered by hand. In this case we will use a suite of commands and different packages to get the data into our environment. read.csv(&quot;./Data/co2.csv&quot;) 4.4.2 xlsx MS Excel files are widely used install.packages(&#39;readxl&#39;) require(&#39;readxl&#39;) read_xlsx(&quot;./Data/Codes.xlsx&quot;, sheet = 1) 4.4.3 Specialized file types - shapefiles require(maptools) land. &lt;- readShapePoly(&#39;./GOM shp/gom_states.shp&#39;) 4.4.4 Webscraping A web scraper is a specialized tool designed to accurately and quickly extract data from a web page. Test case: We will modifying the URL address to scrape Google Scholar Specify publication year and journal title Using a CSS Viewer Modifying R code based on the layout and CSS tags of the publisher 4.4.4.1 Develope URL code The code below documents the structure of the URL text. stem.1 &lt;- &quot;https://scholar.google.com/scholar?start=&quot; stem.2 &lt;- &quot;&amp;q=source:%22transactions+of+the+american+fisheries+society%22&amp;hl=en&amp;as_sdt=1,25&amp;as_ylo=&quot; stem.3 &lt;- &quot;&amp;as_yhi=&quot; stem.4 &lt;- &quot;&amp;as_vis=1&quot; st.y &lt;- 1973 en.y &lt;- 1973 page.vect &lt;- seq(0,80, by = 10) year.vect &lt;- seq(st.y, en.y, by = 1) page.year &lt;- expand.grid(page.vect, year.vect) html.list &lt;- paste0(stem.1, page.year[,1], stem.2, page.year[,2], stem.3, page.year[,2], stem.4) 4.4.4.2 stem.1 This chunk specifies to direct to Google Scholar. 4.4.4.3 stem.2 This chunk specifies the journal to be scraped. In this case the target journal is the Transactions of the American Fisheries Society. This term is joined by + signs. 4.4.4.4 page.year For a given start and end year (st.y and en.y) 4.4.4.5 require(&#39;textreadr&#39;) read_html(file = html.list[1]) 4.4.5 Download data from public repository website &lt;- &quot;https://www.stats.govt.nz/large-datasets/csv-files-for-download/&quot; url &lt;- &quot;https://www.stats.govt.nz/assets/Uploads/Annual-enterprise-survey/Annual-enterprise-survey-2020-financial-year-provisional/Download-data/annual-enterprise-survey-2020-financial-year-provisional-csv.csv&quot; destfile &lt;- &quot;./Data/output.csv&quot; download.file(url, destfile) "],["data-classes.html", "5 Data Classes 5.1 Numeric 5.2 Integer 5.3 Character 5.4 Logical 5.5 Factor 5.6 List 5.7 Vectors 5.8 Matrix 5.9 DataFrame", " 5 Data Classes There are various kinds of R-objects or data structures: Vectors Lists Matrices Arrays Factors Data Frames Lets first understand some of the basic datatypes on which the R-objects are built like Numeric, Integer, Character, Factor, and Logical. 5.1 Numeric num &lt;- 1.2 print(num) class(num) 5.2 Integer Integer: Numbers that do not contain decimal values have a data type as an integer. However, to create an integer data type, you explicitly use as.integer() and pass the variable as an argument. int &lt;- as.integer(2.2) print(int) class(int) 5.3 Character As the name suggests, it can be a letter or a combination of letters enclosed by quotes is considered as a character data type by R. char &lt;- &quot;datacamp&quot; print(char) class(char) char &lt;- &quot;12345&quot; class(char) 5.4 Logical Logical: A variable that can have a value of True and False like a boolean is called a logical variable. log_true &lt;- TRUE print(log_true) class(log_true) log_false &lt;- FALSE class(log_false) 5.5 Factor Factor: They are a data type that is used to refer to a qualitative relationship like colors, good &amp; bad, course or movie ratings, etc. They are useful in statistical modeling. fac &lt;- factor(c(&quot;good&quot;, &quot;bad&quot;, &quot;ugly&quot;,&quot;good&quot;, &quot;bad&quot;, &quot;ugly&quot;)) print(fac) class(fac) levels(fac) nlevels(fac) class(levels(fac)) 5.6 List Unlike vectors, a list can contain elements of various data types and is often known as an ordered collection of values. It can contain vectors, functions, matrices, and even another list inside it (nested-list). lis1 &lt;- seq(1,5) # Integer Vector lis2 &lt;- factor(1:5) # Factor Vector lis3 &lt;- letters[1:5] combined_list &lt;- list(lis1, lis2, lis3) combined_list[[1]] combined_list[[2]] combined_list[[3]] combined_list[[3]][5] flat_list &lt;- unlist(combined_list) class(flat_list) 5.7 Vectors Vectors are an object which is used to store multiple information or values of the same data type. A vector can not have a combination of both integer and character. For example, if you want to store 100 students total marks, instead of creating 100 different variables for each student, you would create a vector of length 100, which will store all the student marks in it. marks &lt;- c(88,65,90,40,65) marks[4] marks[1] marks[6] 5.7.1 Slicing vectors marks[seq(1,4)] marks[c(1,2,4)] char_vector &lt;- c(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;) class(char_vector) length(char_vector) char_vector[1:3] char_vector[-3] char_num_vec &lt;- c(1,2, &quot;a&quot;) char_vector &lt;- c(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;) class(char_vector) length(char_vector) char_vector[1:3] char_vector[-3] vec &lt;- seq(1,1024) vec &lt;- c(1:1024) 5.8 Matrix Similar to a vector, a matrix is used to store information about the same data type. However, unlike vectors, matrices are capable of holding two-dimensional information inside it. M &lt;- matrix(vector, nrow=r, ncol=c, byrow=FALSE, dimnames=list(char_vector_rownames, char_vector_colnames)) # byrow=TRUE signifies that the matrix should be filled by rows. # byrow=FALSE indicates that the matrix should be filled by columns (the default). M &lt;- matrix(seq(1,6), nrow = 2, ncol = 3, byrow = TRUE) M &lt;- matrix(seq(1,6), nrow = 2, ncol = 3, byrow = F) 5.8.1 Slicing matrices M &lt;- matrix(seq(1,6), nrow = 2, ncol = 3, byrow = F) M[1:2, 2:3] 5.9 DataFrame Unlike a matrix, Data frames are a more generalized form of a matrix. It contains data in a tabular fashion. The data in the data frame can be spread across various columns, having different data types. dataset &lt;- data.frame( Person = c(&quot;Aditya&quot;, &quot;Ayush&quot;,&quot;Akshay&quot;), Age = c(26, 26, 27), Weight = c(81,85, 90), Height = c(6,5.8,6.2), Salary = c(50000, 80000, 100000)) class(dataset) nrow(dataset) ncol(dataset) df1 &lt;- rbind(dataset, dataset) df2 &lt;- cbind(dataset, dataset) head(df1,3) str(dataset) summary(dataset) "],["r-syntax-1.html", "6 R syntax 1 6.1 Arithmetic operators 6.2 Arithmetic operators practice 6.3 Missing values (NA) 6.4 Dealing with missing values 6.5 Dealing with problematic values 6.6 Some capabilities of base R statistics", " 6 R syntax 1 6.1 Arithmetic operators Symbol Operation + addition - subtraction * multiplication / division ^ exponentiation PEMDAS applies when writing R-code # Arithmetic operators in action: 5 + 5 / 2 3 * 2^2 (3*2)^2 # Arithmetic operators using objects: z &lt;- 5 w &lt;- c(3,7,9,2) s &lt;- w[3] z + s 6.2 Arithmetic operators practice Using what you know about parenthesis and PEMDAS, in one line of code do each of the following: Number Excercise 1. Assign the variable x to be a vector containing the values 5,5,6,2 2. Assign the variable y to be a vector containing the values 3,3,1,7 3. Add x and y 4. Substract y from x 5. Assign d as y divided by x 3. Multiply z by s then add five (z and s from last practice) 4. Add 5 to z then multilply by s 5. Take z to the fifth power and then add 2 6. Divide s by three, then add 33, then take that sum to the 0.5 power 6.3 Missing values (NA) # is.na tests for missing values dat.1 &lt;- c(-1,NA,1,1,-1) dat.1 + 2 dat.1 + rep(2, length(dat.1)) 6.4 Dealing with missing values In R, missing values are represented by NA. Undefined values (like dividing by zero) are represented by NaN, not a number. Often missing values are represented with numbers: -1, 99, -9999, etc. This is obviously a problem and should be avoided. You will likely need to use indexing prior using arithmetic operations to replace these values. The is.na function and the na.rm argument: Sometimes we do not know whether there are missing values in our data. We can use the is.na function to test for missing values: # is.na tests for missing values dat.1 &lt;- c(-1,NA,1,1,-1) is.na(dat.1) which(is.na(dat.1)) We can use the logical na.rm argument to remove missing values from our data prior to executing the funciton: dat.1 &lt;- c(-1,NA,1,1,-1) mean(dat.1) mean(dat.1, na.rm = T) 6.5 Dealing with problematic values Sometimes we code no data as -1 and that can really screw things up. R does not know that -1 means no data. However we can replace the -1 with NA. There are many ways to do this, but here is a one way. # In this example, -1 is coded as a missing data field. Think back to our logical arguments and subsetting exercises. dat.2 &lt;- c(2,-1,3,4,5) dat.2 == -1 dat.2[dat.2 == -1] dat.2[dat.2 == -1] &lt;- NA dat.1 &lt;- c(2,NA,3,4,5) # is.na tests for missing values is.na(dat.1) # returns the element(s) number in the vector that is NA which(is.na(dat.1)) 6.6 Some capabilities of base R statistics require(stats) require(datasets) require(utils) 6.6.1 Z-scores scores &lt;- c(76,80,83,97,100) ?scale scaled.scores &lt;- scale(scores) hist(scores) scores.data.frame &lt;- data.frame(scores,scaled.scores) scores.data.frame plot(x = scores.data.frame$scores, y = scores.data.frame$scaled.scores, type = &quot;b&quot;, xlab = &quot;Raw Test Scores&quot;, ylab = &quot;Scaled Test Scores&quot;) abline(h = 0) mean(scores) abline(v = mean(scores)) z.scores &lt;- c(scores - mean(scores))/sd(scores) scores.data.frame &lt;- data.frame(scores,scaled.scores,z.scores) scores.data.frame 6.6.2 Quantiles Here is an example using the quantile() function: ?quantile nile.vect &lt;- Nile hist(nile.vect, main = &quot;&quot;, xlab = &quot;Nile river discharge volume&quot;) quantile(x = nile.vect) abline(v = quantile(x = nile.vect), col = &quot;red&quot;, lwd = 2) 6.6.3 Normality Shaprio-Wilk test of normality, the null hypothesis - data are normally distributed ?shapiro.test ?rbeta test.dat.1 &lt;- rbeta(n = 500, shape1 = 0.5, shape2 = 5) hist(x = test.dat.1) # Test if these data are normally distributed shapiro.test(x = test.dat.1) test.dat.2 &lt;- rnorm(n = 500, mean = 0, sd = 1) hist(x = test.dat.2) # Test if these data are normally distributed shapiro.test(x = test.dat.2) 6.6.4 t-test head(ToothGrowth,15) un.dose &lt;- unique(ToothGrowth$dose) ind.1 &lt;- which(ToothGrowth$dose == un.dose[1]) ind.2 &lt;- which(ToothGrowth$dose == un.dose[2]) t.test(ToothGrowth$len[ind.1], ToothGrowth$len[ind.2]) 6.6.5 Linear Models The lm function can be used to create a simple regression model. The rlm()` function accepts a number of arguments: formula: describes the model This is YVAR ~ XVAR YVAR is the dependent (predicted) XVAR is the independent (predictor) # Load the UNM_Enroll.csv data file plot(x = mtcars$wt, y = mtcars$mpg, xlab = &quot;Weight&quot;, ylab = &quot;mpg&quot;, type = &quot;p&quot;, las = F) model.object &lt;- mtcars$mpg ~ mtcars$wt model.object lm(model.object) The intercept is 37.285 and the coefficient for the unemployment rate is -5.344 Therefore, the complete regression equation is rmpg = 37.285 + -5.344 x Weight`. # NHST anova(lm(model.object)) summary(lm(model.object)) pred.y.vals &lt;- predict(lm(model.object)) plot(x = mtcars$wt, y = mtcars$mpg, xlab = &quot;Weight&quot;, ylab = &quot;mpg&quot;, type = &quot;p&quot;, las = F) lines(x = mtcars$wt, pred.y.vals) 6.6.6 Analysis of Variance # ANOVAs are linear models with categorical predictors head(ToothGrowth) anova.model.object &lt;- ToothGrowth$len ~ ToothGrowth$dose anova(lm(anova.model.object)) "],["subsetting-and-logical-operators.html", "7 Subsetting and Logical Operators 7.1 Indexing 7.2 Logical operators", " 7 Subsetting and Logical Operators 7.1 Indexing Indexing is used for interogation and assignment. Interogation means to examine the value of an object. Assigment means to assign the value of an object. x &lt;- c(3,7,11,19) # Assignment x[c(2,3)] &lt;- c(120,140) # Interogation x &lt;- c(3,7,11,19) x[3] x[4] Extend the utility of indexing: [] by combining with c. For example to get the second and third element in the variable x x &lt;- c(3,7,11,19) x[1] x[2] x[c(1,2)] x[c(2,1)] y &lt;- c(3,2,1) x[y] # Extend the index using a negative sign y.vect &lt;- c(1,2,3,4,5,6) y.vect[-3] Number Excercise 1. Can you get a + to occur on your console? 2. How many different ways can you create a vector labled q containing two 3s and four 5s? Try some! 3. Assign a vector of four elements: 3,7,9 and 2 to w. 4. Assign the third element of w to s, where s is equal to 6. 5. What is the length of a sequence that starts at 1.1, ends at 9.2, and has increments of 0.894? 6. What is the 3rd value of the sequence you created? 7. Use the summary function on the sequence object you created, what is returned? 7.2 Logical operators Symbol Operation &lt; less than &gt; greater than &lt;= less than or equal to &gt;= greater than or equal to == exactly equal to Logical operators are useful in indexing and subsetting data classes. They return TRUE and FALSE values. # logical operators examples y &lt;- c(2,3,4) w &lt;- c(3,7,9,2) y &gt; 1 w == 2 w &lt; 4 | w &gt;= 8 w &gt; 4 &amp; w &lt;= 8 Combine logical operators with the function which # logical operators examples y &lt;- c(2,3,4) y &gt; 1 which(y &gt; 1) which(y &lt; 3) which(y &lt;= 3) y[which(y &lt;= 3)] &lt;- 0 Logical operators practice Number Excercise 1. Assign a vector a to have six elements: 1,0,8,11,12,20 2. Which elements in a are less than five 3. Which elements in a are greater than 13 or less than 10 "],["loops-and-ifelse-statements.html", "8 Loops and ifelse statements 8.1 Loops 8.2 If, else, and ifelse", " 8 Loops and ifelse statements 8.1 Loops In programming loops are very common and represent the most basic way to accomplish tasks recursively and or repetitively. We will learn about other ways to handle repetitive operations, but loops are still widely used. Structure of loops: for (i in 1:5) # Run the loop by single integers { # start loop # run recursive calculation here } # end loop for (i in 1:5) { print(i) } n &lt;- 4 for(i in 1:n) { print(&quot;Hello World&quot;) } n &lt;- 8 n.vect &lt;- c() for(i in 1:n) { n.vect[i] &lt;- i + 2 print(n.vect) } Practice # Create a vector of recursive values # Use a loop to calculate: # 1/2 + 2/3 + 3/4 + 4/5 8.2 If, else, and ifelse If statements are useful if we want R to do something based on our logical question. a &lt;- 7 if (a == 7) print(&quot;a is 7&quot;) If the condition is not met, nothing will print to the console a &lt;- 7 if (a == 5) print(&quot;a is 7&quot;) The same approach works if we want to use not logical. a &lt;- 7 if (a != 5) print(&quot;a is not 5&quot;) Using if and else together allows you to do one thing if the condition is true and something else if the condition is false. a &lt;- 7 if (a == 7) print(&quot;a is 7&quot;) else print(&quot;a is not 7&quot;) a &lt;- 8 if (a == 7) print(&quot;a is 7&quot;) else print(&quot;a is not 7&quot;) The if and else function only can assess one element at a time. To assess a whole vector, you can use the ifelse function a.vec &lt;- c(4,3,6,7) ifelse(a.vec &gt; 5, &quot;Greater&quot;, &quot;Less Than&quot;) Create this data frame in R representing the maximum observed tidal amplitude each year (Fictional Data). In years from 1990 to 1992, tide was measured in centimeters, from 1993 to 1995 it was measured in milimeters. tide.df &lt;- data.frame(Year = c(1990:1995), height = c(130, 230, 210, 1450, 1870, 2200 )) Use ifelse statements to first print to screen whether each row is pre-change or post-change Next use ifelse to create a new variable with the tidal amplitude in meters tide.df &lt;- data.frame(Year = c(1990:1995), height = c(13, 23, 21, 14, 18, 22)) ifelse(tide.df$Year &lt;= 1992,&quot;Pre-change&quot;, &quot;Post-Change&quot;) tide.df$height &lt;- ifelse(tide.df$Year &lt;= 1992, tide.df$height/100, tide.df$height/1000) "],["assignments.html", "9 Assignments 9.1 Turning in code 9.2 Assignment 01 - Working in R and RStudio 9.3 Assignment 02 - Communicate 9.4 Assignment 03 - The Tidyverse and Loops 9.5 Project", " 9 Assignments Below you will find: A description of how code will be turned in and evaluated. Four assignments that you will complete during the semester. A description of the Project. 9.1 Turning in code You will save your code to your individual-linked dropbox account. Considerations: All files submitted will be .r files and these must be annotated and have descriptive header information. Annotation and descriptive header information is reviewed in the pages of this courses website. For assignments that require you to submit multiple files, all of the files will need to run error free and accomplish the tasks for credit to be earned. 9.2 Assignment 01 - Working in R and RStudio 9.2.1 Assignment 01.01 Make a new script into the code directory, the name of the script will be called init.proj.r This script will be called init.proj The code will populate the working directory with subdirectories: R, data, doc, figs, and output. The goal of the function will be to automatically creates a directory structure outlined in (https://nicercode.github.io/blog/2013-04-05-projects/). i.e. it will have directories: . 9.2.2 Assignment 01.02 Make a new script, the name of the script will be called import.and.write.r This script will do the following: Write the entire mtcars data as a csv file to the data directory (mtcars is in the package datasets) Import the the.csv file you wrote, selecting only the first 10 rows only. From this imported and reduced data frame, make a new data frame that includes a column that is the hp per cylinder (divide hp by cyl) Name this column hp.per.cyl. Print the data frame to the screen Save the data frame the data directory as mtcars.red.RData (it will be saved as file type .RData). 9.2.3 Assignment 01.03 Make a new script, the name of the script will be called index.practice.r x &lt;- c(ww, ee, ff, uu, kk), use indexing to return: ee, ff ee ff x &lt;- c(ss, aa, ff, kk, bb), use indexing to return: uu NA kk a &lt;- c(2, 4, 6, 8) and b &lt;- c(TRUE, FALSE, TRUE, FALSE) Write code to determine the maximum and minimum values of a[b]. Write an R expression that will return the sum value of 10 for the vector x &lt;- c(2, 1, 4, 2, 1, NA) Write an R expression that will return the sum value of 11 for the vector x &lt;- c(2, 1, 4, 2, 1, NA) Consider the data frame s &lt;- data.frame(first= as.factor(c(x, y, a, b, x, z)), second=c(2, 4, 6, 8, 10, 12)). Write two different R statements that will return the output 2, 4, 10, by using the variable first as an index vector. Write three different R statements that will return the positions of 3 and 7 in the vector x &lt;- c(1, 3, 6, 7, 3, 7, 8, 9, 3, 7, 2). 9.2.4 Assignment 01.04 Make a new script, the name of the script will be called logical.operators.practice.r Using the mtcars data: Use logical operators to output only those rows of data where column mpg is between 15 and 20 (excluding 15 and 20). Use logical operators to output only those rows of data where column cyl is equal to 6 and column am is not 0. Output only those rows of data where columns vs and am have the same value 1, solve this without using == operator. Output only those rows of data where at least vs or am have the value 1, solve this without using == or !=. 9.2.5 Assignment 01.05 Make a new script, the name of the script will be called loops.practice.r Using the mtcars data: Write a for loop that iterates over the first seven values of the first numeric column in mtcars and prints the cube of each number using print(). Write a for loop that iterates over the first seven values of the first three numeric columns in mtcars and prints values using print(). Write a for loop that iterates over the column names of the iris dataset. The loop will print each column name and the number of characters in the column name in parenthesis. Example output for one iteration of the loop is: Sepal.Length (12). Use the following functions print(), paste() and nchar(). Write a while loop that prints out standard random normal numbers (use rnorm()) but stops (breaks) if you get a number bigger than 1. Use a while loop to investigate the number of terms required before the product (1)(2)(3)(4)(n) reaches a value greater than 10 million. 9.3 Assignment 02 - Communicate 9.4 Assignment 03 - The Tidyverse and Loops 9.5 Project 9.5.1 Project Requirement 01: You will upload a .Rmd file that I will knit to an .html file. This document will include your name and the title of your project. Note in Rmarkdown doc, it is easiest to put all of the files (.r, .png, ect.) into a single directory, so no need to make sub-directories in the project. You will write approximately 400 words allocated into three sections: 1.) Introduce your project - three sentences. 2.) Describe the: computational methods and the data you will use. This section (the computation section section) will take the most text. You will use topic sentences and paragraphs to describe the general and specific approach you will use to evaluate the data. The data must be larger than 2,000 records and must be publicly available. You will keep the scope of the proposal to focus on description of the data and describe in detail how you will manipulate the data with code (i.e. describe the computational methods in detail). The focus of the project is not to review the actual scientific implications (statistical inference and hypothesis testing). Instead, the focus of the project will be data exploration, using Groelmund and Wickham approaches. 3.) Describe the deliverable (at least three) that you will accomplish (one sentence per deliverable), 4.) Present the project idea to the class - 20 minute presentation using only material you have provided me in the .Rmd file. The document will be titled Name.Proj.Prop.Rmd, where Name is your last name. You will meet in person or by phone, with me, to discuss the project scope and objectives prior to submitting the .Rmd file. 9.5.2 Project Requirement 02: You will prepare a .Rmd file of your project. I will knit this to a .html file that you will present to the class. The grade assigned based on the level of complexity of the analysis and amount of original coding. Full credit will be given to projects that showcase your expertise in all aspects of the techniques discussed in this class. Only projects that contain every aspect of import, tidy, transform, visualize, model, and communicate can be given full credit. The code you provide in your project will be extensive and will document your mastery of the tidyverse, data visualization, and original and interesting analysis. My expectation is that the coding will be extensive and demonstrate the philosophy of reproducible workflow that we have studied. The .html knit must knit on my machine. "]]
